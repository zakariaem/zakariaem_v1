// Generated by Zakariae Mhiriz from file ros_zakariaem/MyoArm.msg
// DO NOT EDIT!


#ifndef ROS_ZAKARIAEM_MESSAGE_MYOARM_H
#define ROS_ZAKARIAEM_MESSAGE_MYOARM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_zakariaem
{
template <class ContainerAllocator>
struct MyoArm_
{
  typedef MyoArm_<ContainerAllocator> Type;

  MyoArm_()
    : arm(0)
    , xdir(0)  {
    }
  MyoArm_(const ContainerAllocator& _alloc)
    : arm(0)
    , xdir(0)  {
  (void)_alloc;
    }



   typedef uint8_t _arm_type;
  _arm_type arm;

   typedef uint8_t _xdir_type;
  _xdir_type xdir;





  typedef boost::shared_ptr< ::ros_zakariaem::MyoArm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_zakariaem::MyoArm_<ContainerAllocator> const> ConstPtr;

}; // struct MyoArm_

typedef ::ros_zakariaem::MyoArm_<std::allocator<void> > MyoArm;

typedef boost::shared_ptr< ::ros_zakariaem::MyoArm > MyoArmPtr;
typedef boost::shared_ptr< ::ros_zakariaem::MyoArm const> MyoArmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_zakariaem::MyoArm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_zakariaem::MyoArm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_zakariaem

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_zakariaem::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_zakariaem::MyoArm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_zakariaem::MyoArm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01e586809ffd60cf3f07c41869248647";
  }

  static const char* value(const ::ros_zakariaem::MyoArm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01e586809ffd60cfULL;
  static const uint64_t static_value2 = 0x3f07c41869248647ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_zakariaem/MyoArm";
  }

  static const char* value(const ::ros_zakariaem::MyoArm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Arm message for the Thalmic Myo. Using firmware 1.1.4.2, \n"
"#Thalmic Gesture Recognition is possible after sync gesture is performed.\n"
"\n"
"#arm represents which arm the device is on\n"
"#Enumerated: UNKNOWN=0, RIGHT=1, LEFT=2\n"
"uint8 arm\n"
"#xdir represents the direction of the x-axis\n"
"#Enumerated: UNKNOWN=0, X_TOWARD_WRIST=1, X_TOWARD_ELBOW=2\n"
"uint8 xdir\n"
;
  }

  static const char* value(const ::ros_zakariaem::MyoArm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm);
      stream.next(m.xdir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyoArm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_zakariaem::MyoArm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_zakariaem::MyoArm_<ContainerAllocator>& v)
  {
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
    s << indent << "xdir: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xdir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ZAKARIAEM_MESSAGE_MYOARM_H
